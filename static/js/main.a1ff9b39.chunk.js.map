{"version":3,"sources":["res/GCE.svg","res/github.svg","res/linkedin.svg","res/medium.svg","res/behance.svg","res/twitter.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleEvent","event","window","open","state","setState","ReactRotatingText","require","react_default","a","createElement","className","class","role","aria-label","id","target","rel","href","src","GitHub","alt","Twitter","Behance","Medium","LinkedIn","items","onClick","CampusExpert","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a1ff9b39.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/GCE.608399dc.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.932d33b0.svg\";","module.exports = __webpack_public_path__ + \"static/media/linkedin.99c50a47.svg\";","module.exports = __webpack_public_path__ + \"static/media/medium.3d63000a.svg\";","module.exports = __webpack_public_path__ + \"static/media/behance.be8243f0.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitter.c033f77a.svg\";","import React, { Component } from 'react';\nimport CampusExpert from './res/GCE.svg';\nimport GitHub from './res/github.svg';\nimport LinkedIn from './res/linkedin.svg';\nimport Medium from './res/medium.svg';\nimport Behance from './res/behance.svg';\nimport Twitter from './res/twitter.svg';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { open: false };\n  }\n\n  handleEvent = event => {\n    const url = 'https://drive.google.com/file/d/17QbkScF4RExOwqH9HcHT_m_FpcS4F5am/view?usp=sharing';\n    window.open(url, '_blank');\n  };\n\n  handleClick() {\n    this.setState({\n      open: !this.state.open\n    });\n  }\n\n  render() {\n    var ReactRotatingText = require('react-rotating-text');\n    const MyProfession = ['Software Engineering Student', 'Software Developer', 'GitHub Campus Expert', 'GDG Algiers Co-Organizer'];\n    return (\n      <div className=\"App\">\n\n        <nav class=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\n          <div id=\"navbarBasicExample\" class=\"navbar-menu\">\n            <div class=\"navbar-end\">\n              <a class=\"navbar-item is-active\">Home</a>\n              <a class=\"navbar-item\">About Me</a>\n              <a class=\"navbar-item\">My Projects</a>\n              <a class=\"navbar-item\">My Articles</a>\n              <a class=\"navbar-item\">My Talks</a>\n            </div>\n          </div>\n        </nav>\n\n        <header className=\"App-body\">\n          <div className=\"SocialMedia\">\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/Gattalraouf\">\n              <img src={GitHub} className=\"Social-Media-Button\" alt=\"Abderraouf on GitHub\" />\n            </a>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/GattalRaouf\">\n              <img src={Twitter} className=\"Social-Media-Button\" alt=\"Abderraouf on Twitter\" />\n            </a>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.behance.net/AbderraoufGattal\">\n              <img src={Behance} className=\"Social-Media-Button\" alt=\"Abderraouf on Behance\" />\n            </a>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://medium.com/@Abderraouf\">\n              <img src={Medium} className=\"Social-Media-Button\" alt=\"Abderraouf on Medium\" />\n            </a>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.linkedin.com/in/abderraouf-gattal/\">\n              <img src={LinkedIn} className=\"Social-Media-Button\" alt=\"Abderraouf on LinkedIn\" />\n            </a>\n          </div>\n          <div className=\"Text\">\n            <p id=\"Welcoming\">Hello, I am</p>\n            <h1 id=\"MyName\">Abderraouf GATTAL</h1>\n            <h1 id=\"MyProfession\"><ReactRotatingText items={MyProfession} /></h1>\n\n            <button className=\"button is-outlined is-rounded is-large is-my-dark\" onClick={this.handleEvent}>Download My CV</button>\n          </div>\n          <img src={CampusExpert} className=\"App-logo\" alt=\"GitHub Campus Expert\" />\n        </header>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}